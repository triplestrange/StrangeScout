import { Component, OnInit } from '@angular/core';
import { ApiQueryService } from '../api-query.service';

@Component({
	selector: 'app-data',
	templateUrl: './data.component.html',
	styleUrls: ['./data.component.css']
})

export class DataComponent implements OnInit {
	// sets
	events: string[]
	teams: string[]
	matches: string[]

	// selection
	event: string;
	team: string;
	match: string;

	// query data
	queryData: {}[];
	keys: string[];

	constructor(private query: ApiQueryService) {
		// default selection
		this.event = ""
		this.team = ""
		this.match = ""

		// initial index loads
		this.loadEvents()
		this.loadTeams()
		this.loadMatches()

		// initial query data load
		this.loadQueryData()
	}

	ngOnInit() {
	}

	// IDEXES ========================================

	// load events index
	loadEvents() {
		var self = this
		this.query.getEvents(this.team, function(response) {
			if (self.isJSON(response)) {
				self.events = JSON.parse(response)
			} else {
				self.events = []
			}
		})
	}

	// load teams index
	loadTeams() {
		var self = this
		this.query.getTeams(this.event, this.match, function(response) {
			if (self.isJSON(response)) {
				self.teams = JSON.parse(response)
			} else {
				self.teams = []
			}
		})
	}

	// load matches index
	loadMatches() {
		var self = this
		this.query.getMatches(this.event, this.team, function(response) {
			if (self.isJSON(response)) {
				self.matches = JSON.parse(response)
			} else {
				self.matches = []
			}
		})
	}

	// ===============================================

	// returns an array of all values in an object (uses the master key array generated by the loadQueryData method)
	getValues(obj: {}) {
		var response = [];
		var prop;
		for (prop of this.keys) {
			response.push(obj[prop])
		}
		return response
	}

	// download query CSV
	downloadQuery() {
		window.open(this.query.getQueryPath(this.event, this.team, this.match))
	}

	// load query data into object
	loadQueryData() {
		var self = this
		this.query.getQuery(this.event, this.team, this.match, true, function(response) {
			self.queryData = JSON.parse(response)
			self.keys = Object.keys(self.queryData[0])
		})
	}

	// is a string JSON?
	isJSON(j: string) {
		try {
			JSON.parse(j)
		} catch(e) {
			return false
		}
		return true
	}
}
